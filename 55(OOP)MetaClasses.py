class MyMetaclass(type):
    def __new__(mcs, name, bases, attr):
        print("створення нового обєкту", name)
        return super(MyMetaclass, mcs).__new__(mcs, name, bases, attr)

    def __init__(cls, name, bases, attr):
        print("Initialization of class", name)
        super(MyMetaclass, cls).__init__(name, bases, attr)


class Student(metaclass=MyMetaclass):
    def __init__(self, name, age):
        self.age = age
        self.name = name


student = Student("John", 20)
print("Ім'я студента:", student.name)
print("Вік студента:", student.age)


class MyList(list):
    def get_length(self):
        return len(self)


lst = MyList()
lst.append(1)
lst.append(2)
lst[0] = 3
print(lst, lst.get_length())

MyList = type("MyList", (list,), dict(get_length=lambda self: len(self)))  # скорочений тип створення класу

lst2 = MyList()
lst2.append(1)
lst2.append(2)
print(lst2, lst2.get_length())

print(MyList)

"""
Концепція метакласу відрізняється від звичайного класу тим, що метаклас визначає поведінку та структуру звичайних класів,
 тобто він визначає, як класи створюються, які атрибути вони мають та як вони спадковуються.
У свою чергу, звичайний клас визначає структуру та поведінку об'єктів, які належать до цього класу.
Ось декілька ключових відмінностей між метакласом та звичайним класом:
Створення класу: Метаклас визначає, як самі класи створюються. Він визначає логіку, яка виконується під 
час визначення нового класу. Звичайний клас визначає структуру та методи об'єктів.
Атрибути класу: Метаклас може модифікувати атрибути класу перед його створенням. Звичайний клас визначає атрибути 
та методи, які будуть доступні об'єктам класу.
Спадкування: Метаклас може контролювати спадкування атрибутів та методів від батьківських класів.
 Звичайний клас визначає відношення спадкування між класами.
Контроль: Метаклас дозволяє вам впливати на всі класи, які використовують цей метаклас.
 Звичайний клас впливає тільки на об'єкти, які створені на його основі.
Щодо питання, чому б використовувати метаклас у випадку, коли це можна зробити за допомогою звичайного класу,
 ось кілька випадків, де використання метакласів може бути корисним:
Застосування стандартів: Метакласи дозволяють вам накладати стандарти та правила на всі класи,
 що використовують даний метаклас. Наприклад, ви можете вимагати наявність певних атрибутів або методів у всіх класах.
Автоматична генерація коду: Метакласи можуть генерувати код автоматично,
 що може спростити рутинні завдання при визначенні класів.
Поліпшення паттернів проектування: Ви можете впроваджувати певні паттерни проектування автоматично,
 використовуючи метакласи.
Додаткові функції: Метакласи можуть додавати додаткові функції, які доступні у всіх класах, використовуючи цей метаклас.
У багатьох випадках звичайний клас може впоратися зі завданнями,
 але метакласи надають більш гнучкі можливості для керування та налаштування класів.
"""

"""""""""""""""""""""""""""""""""""""""""""""MODULES"""""""""""""""""""""""""""""""""""""""
import math
from math import pi

print(math.pi)
print(pi)





